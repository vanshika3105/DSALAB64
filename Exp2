Code:

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX 100 // Maximum size of stack

char stack[MAX];
int top = -1;

// Function prototypes
void push(char c);
char pop();
int precedence(char c);
int isOperator(char c);
int isEmpty();

void infixToPostfix(const char* infix, char* postfix) {
    int i = 0, j = 0;
    while (infix[i]) {
        if (isalnum(infix[i])) { // If operand, add to output
            postfix[j++] = infix[i];
        } else if (infix[i] == '(') { // If '(', push to stack
            push(infix[i]);
        } else if (infix[i] == ')') { // If ')', pop until '('
            while (!isEmpty() && stack[top] != '(') {
                postfix[j++] = pop();
            }
            pop(); // Pop '('
        } else if (isOperator(infix[i])) { // If operator
            while (!isEmpty() && precedence(stack[top]) >= precedence(infix[i])) {
                postfix[j++] = pop();
            }
            push(infix[i]);
        }
        i++;
    }
    // Pop all remaining operators from stack
    while (!isEmpty()) {
        postfix[j++] = pop();
    }
    postfix[j] = '\0'; // Null terminate string
}

void push(char c) {
    if (top < MAX - 1) {
        stack[++top] = c;
    }
}

char pop() {
    if (!isEmpty()) {
        return stack[top--];
    }
    return '\0'; // Return null if empty
}

int precedence(char c) {
    switch (c) {
        case '+':
        case '-': return 1;
        case '*':
        case '/': return 2;
        case '^': return 3;
        default: return 0; // Non-operator
    }
}

int isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

int isEmpty() {
    return top == -1;
}

int main() {
    char infix[MAX], postfix[MAX];

    printf("Enter an infix expression: ");
    scanf("%s", infix);

    infixToPostfix(infix, postfix);
    
    printf("Postfix expression: %s\n", postfix);
    
    return 0;
}
