Code:

#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node
struct Node {
    int key;
    struct Node* left;
    struct Node* right;
};

// Function prototypes
struct Node* createNode(int key);
struct Node* insert(struct Node* root, int key);
struct Node* search(struct Node* root, int key);
struct Node* deleteNode(struct Node* root, int key);
struct Node* minValueNode(struct Node* node);
void inorder(struct Node* root);
void preorder(struct Node* root);
void postorder(struct Node* root);

// Main function
int main() {
    struct Node* root = NULL; // Initialize the root of the BST
    int choice, key;

    while (1) {
        printf("\nBinary Search Tree Menu:\n");
        printf("1. Insert\n");
        printf("2. Search\n");
        printf("3. Delete\n");
        printf("4. Inorder Traversal\n");
        printf("5. Preorder Traversal\n");
        printf("6. Postorder Traversal\n");
        printf("7. Exit\n");

        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter key to insert: ");
                scanf("%d", &key);
                root = insert(root, key);
                break;
            case 2:
                printf("Enter key to search: ");
                scanf("%d", &key);
                struct Node* foundNode = search(root, key);
                if (foundNode != NULL) {
                    printf("Key %d found in the tree.\n", foundNode->key);
                } else {
                    printf("Key %d not found in the tree.\n", key);
                }
                break;
            case 3:
                printf("Enter key to delete: ");
                scanf("%d", &key);
                root = deleteNode(root, key);
                break;
            case 4:
                printf("Inorder Traversal: ");
                inorder(root);
                printf("\n");
                break;
            case 5:
                printf("Preorder Traversal: ");
                preorder(root);
                printf("\n");
                break;
            case 6:
                printf("Postorder Traversal: ");
                postorder(root);
                printf("\n");
                break;
            case 7:
                printf("Exiting program...\n");
                exit(0);
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    }

    return 0;
}

// Function to create a new node
struct Node* createNode(int key) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->key = key;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert a new node into the BST
struct Node* insert(struct Node* root, int key) {
    if (root == NULL) {
        return createNode(key); // Create a new node if tree is empty
    }

    if (key < root->key) {
        root->left = insert(root->left, key); // Insert in left subtree
    } else if (key > root->key) {
        root->right = insert(root->right, key); // Insert in right subtree
    }

    return root; // Return unchanged node pointer
}

// Function to search for a node with given key
struct Node* search(struct Node* root, int key) {
    if (root == NULL || root->key == key) {
        return root; // Return node if found or NULL if not found
    }

    if (key < root->key) {
        return search(root->left, key); // Search in left subtree
    } else {
        return search(root->right, key); // Search in right subtree
    }
}

// Function to find the minimum value node in the tree
struct Node* minValueNode(struct Node* node) {
    struct Node* current = node;

    while (current && current->left != NULL) {
        current = current->left; // Traverse to the leftmost leaf
    }

    return current; // Return the minimum value node
}

// Function to delete a node from the BST
struct Node* deleteNode(struct Node* root, int key) {
    if (root == NULL) {
        return root; // Return NULL if tree is empty
    }

    if (key < root->key) {
        root->left = deleteNode(root->left, key); // Recur for left subtree
    } else if (key > root->key) {
        root->right = deleteNode(root->right, key); // Recur for right subtree
    } else { // If the node is found
        // Case 1: No child or one child
        if (root->left == NULL) {
            struct Node* temp = root->right; // Store right child
            free(root); // Free memory
            return temp; // Return updated node pointer
        } else if (root->right == NULL) {
            struct Node* temp = root->left; // Store left child
            free(root); // Free memory
            return temp; // Return updated node pointer
        }

        // Case 2: Two children - Get the inorder successor (smallest in right subtree)
        struct Node* temp = minValueNode(root->right);

        // Copy the inorder successor's content to this node
        root->key = temp->key;

        // Delete the inorder successor
        root->right = deleteNode(root->right, temp->key);
    }

    return root; // Return unchanged node pointer
}

// Function for inorder traversal of BST
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);          // Traverse left subtree
        printf("%d -> ", root->key);  // Visit node
        inorder(root->right);         // Traverse right subtree
    }
}

// Function for preorder traversal of BST
void preorder(struct Node* root) {
    if (root != NULL) {
        printf("%d -> ", root->key);  // Visit node
        preorder(root->left);         // Traverse left subtree
        preorder(root->right);         // Traverse right subtree
    }
}

// Function for postorder traversal of BST
void postorder(struct Node* root) {
    if (root != NULL) {
        postorder(root->left);         // Traverse left subtree
        postorder(root->right);         // Traverse right subtree
        printf("%d -> ", root->key);   // Visit node
    }
}
